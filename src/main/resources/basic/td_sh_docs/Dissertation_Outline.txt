Statement of project aim

The aim of this project is to explore new ways in which linked genealogical datasets with multiple uncertain linkages of varying certainties can be expressed, stored and represented. This involves the defining of a structure that is expressive enough to represent all the logical genealogical structures and interactions from a range of record sources. Despite being reliant on source records the structure itself should be agnostic of any particular record format or topologies and instead should be based upon real logical reference points, for example in the genealogical case that a person can have only two biological parents or that a person can potential produce offspring with any number of distinct partners. Once a structures that is expressive enough has been defined then ways of restricting the structure to allow pedigrees and likely relationships to be surmised from the data structure will be devised. This will be necessary to variably limit the complexity of the structure while maintaining sufficient expressiveness. Beyond this ways of querying the structure will also be made. These will need to be able to give consideration to the uncertainties that exist in the structure inherent from the linkage process as well as identify which linkages are able to co-exist in a realistic pedigree. The project will also explore ways to express textually the justifications and evidence behind the set of results for each query. In evaluation a consideration will be made of the approaches taken, their suitability, efficiency and wider implications both for other linkage related domains and the required approach to the underlying linkage algorithms.

Background

Before detailing the particulars of the research undertook it is first important to define the wider field in which the project sits and the terminology and implications of the field for what the findings being presented throughout the remainder of this dissertation.

The origins of the data to be represented

The domain of the underlying data is from the domain of genealogy. This is the study of populations over time, the changes in individuals and the relationships and interactions between individuals that can be recorded and considered. This data can come from a range of sources, for example birth, death and marriage certificates; christening, census and health care records to name but a few. It is possible to consider that one could construct a genealogical structure, a family tree per se, using the information found on the these different source documents. One could take a birth record and identify the name of the child and of the parents. From this a census record from a decade previous could identify one of the parents named as a child within a family schedule, on this record the names of the parent's sibling could also be identified. From this a birth record could then be found with one of the siblings named as a parent thus identifying the child named on the second birth certificate as a first cousin of the initial child. From this simply example we can see that we can consider traversable genealogical structures built upon a range of source records. However, the making of 'links' across the source records to create traversable data structures is not a simple task; our aim in creating links is to identify multiple entries in the source records that the same individual appears. If every individual had a unique identifier that was present across all the source documents then this task would be very simple. The real world records though lack this meaning that the decision of whether two entries pertain to the same individual has to be made based upon the available information that is common across the records being compared; for example first name, surname, date of birth, birth place and occupation. Given that names alone cannot be seen as unique identifiers in a large scale population it is required to consider each different piece of information on the source records to make 'links' between different entries. When these links are being made due to the difficulty in uniquely identifying individuals there is a degree of uncertainty in the made linkage. A value or heuristic can be given for this uncertainty based upon the similarity of the compared entries, greater certainty can be given to a linkage if further records which support the linkage are also found. For example take three records detailing the information forename (F), surname (S), DOB (D), hospital number (H) and birthplace (B) where the first record is a hospital record detailing F, S, D and H; the second a birth certificate detailing F, S, D and B; and the third record from an admin database detailing S, H and B as laid out in <FIG 1>. A linkage can be made between the hospital record and the birth record due to being able to match the content of F, S and D; this linkage can then be further supported if a record in found in the admin database which gives a connection between H and B. The admin record in this case can be considered a supporting document to the initial linkage which increases the certainty in the linkage which has already been made.

The idea of matching data across multiple record sources to identify link which form data structures is termed as data linkage. Within the field research is occurring across a range of domains into taking a process, as defined above, which is simple to imagine a human performing and enabling a computer to perform the same. Such research stretches back decades <CITE Dunn & Newcombe & Fellegi> with the value and far reaching potentials of linkage being identified even as far back as Dunn's research. Linkage approaches have evolved and their accuracy improved over the years and in light of large scale digitised databases now becoming available are becoming increasingly valuable. The idea of linkage laid out above defines the general idea of linkage, i.e. the matching of common entities across source records and the linkage together of these to create structures.

The research laid out in this dissertation however looks at representing the output of a linkage process that goes beyond a modern linkage algorithm (which simply outputs a single best fit link between entities) and works with an idealised linkage process output. This output identifies the source records that support each given link, gives a heuristic for the certainty of the link and also can return multiple possible links when it is not possible to give a definitive linkage on a particular entity.

Wider context of research

Research into data linkage can be seen across a range of longitudinal projects around the globe. Research especially notable within the field can be seen over the past two decades in the Western Australia Data Linkage System <CITE Holman> and the Rochester epidemiology project <CITE Melton>. More recent work and of a greater influence to the research laid out in this paper is the Digitising Scotland project which is developing approaches to linking large scale datasets of birth, marriage and death records to build genealogical structures. The project is interested in finding ways to calculate linkage certainty and provenance; and allowing multiple possible potentially conflicting linkages to co-exist. The research presented here then allows for consideration to be made of how the output of such a linkage process will need to look to allow for an intelligibly and useful end representation of the data to be made. Building an understanding of the output of such a linkage process will have benefit for the further onwards research centred around designs of the process.

Probabilistic databases

Research is also ongoing into probabilistic databases which look to represent database entities which cannot be deterministically classified as probabilities. The probabilistic approaches taken in these database style approaches <CITE Barbara & Aggarwal> are rooted in the realisation of real world data and entities being uncertain as has been alluded to in the case of data linkage and laid out in <SEC Origins>. Research being done into uncertainty and linkage will inherently produce data where entities (as well as the linkages in between them) are uncertain and therefore the approaches that probabilistic databases take to approaching this offers another perspective on the issue.

Application to other fields

The application of this research to fields beyond genealogical linkage will also be worth considering. Genealogy is often used as a good testing ground for new approaches to linkage but the value of linkage that considers uncertainty and in the case of this research how that is presented and represented to the user could have implications for fields such as medical record linkage and security linkage. For example in both cases action is likely to be taken on high health risk and flagged individual respectively. These actions will be based upon the linkages made and therefore in the presence of uncertainty it important that a quantified value is presented to end users so that they can make better decisions based on a better understanding of the data. The value of data which can be used with nuance has wide reaching implications for how linked data is used both locally for example across the remit of the ADRC and further a field where linked data finds use.

Other Representations and Ontologies for Genealogical datasets

The way in which genealogical data and the relationships between entities is represented is considered by a number of different models and ontologies, for example GENTECH and OWL respectively. The GENTECH model <CITE GENTECH> focuses on how data can be stored with full expressiveness arising from multiple different sources with the aim of facilitating better sharing of genealogical data between researchers. The model does not however offer approaches to handling uncertainty and multiple linkage, an area where this dissertation focuses.

The Web Ontology Language (OWL) builds upon the Resource Description Framework (RDF) and offers a formal way to decribe taxonomies and classifications in networks. There has been some work <CITE Stevens and Tsarkov> into using the OWL model to represents. Modelling in this way offers some interesting benifits including considering edges by there inverse but issues are noted pertatinig to too many inferences being made and lack of ability to infer full and half relationships. The limitations of the OWL ontology for this project is likely to be int the issue of the over generation of inferences especilly in light of the volume of additional links that are to be created in our propesed strucutures to handle uncertatinty.

The Research

To present the approach taken in this research I will first talk around the designing of the structure and the considerations made demonstrated in the consideration of a number of exemplar use cases. Once the structure has been introduced the structural restriction which can be laid atop of this are also discussed before considering the approaches taken to querying the structure and the way in which meaningful information can be returned. This involves both the calculation and structuring of the returned information as well as considering the value and approach taken to providing textual justifications for this. This section will focus on the idealised conceptual approach to the aforementioned with a more detailed implementation level mapping of concepts to code and the reasoning and nuances of the implementation discussed in greater detail later. A <CHECK consideration/implementation> of a query language for the structure and the associated queries will also be discussed and define <CHECK although not implemented>. The scalability, intelligibility and usability of the research for the given domain will be considered in evaluation using a number of varied use cases.

Design Consideration and Process of Structure

Note on vocabulary 

Where the phrase 'paper records' is used this is referring to the records that exist in the pre linked dataset.
Within the specified data structures, 'links' will be seen that go from an intermediary object in the structure to a person object. Due to the complications arising from such a structure representing the output of an underling linkage process, although the links in the below figures are conceptually easy to think of as links, I will use the term 'edge' akin to its use in graph theory to maintain clarity of meaning.

Approach

The approach to this research began with an initial specification that had been laid down during previous research work. The next step was to expand on this so to allow the many possible genealogical and uncertainty permutations to be represented, while also offering a structuring that enables restrictions to be placed within the data structure.

Start point

The initial interfaces for the data consisted of person and partnership objects. In this initial implementation a person has a number of partnerships of which they are a member and a single partnership of which they are the child. A partnership has a single male and female member and also a list children. The assumption in the use of this structure is that any children listed are known children of the given parents of which there is only one given pairing. The restrictions in this structure impose limitations to the complexity of the scenarios that can be modelled using the initial interfaces.

It could be considered that the existing interfaces be used with a new set of assumptions to allow uncertainty to be represented, an approach to such would be to create a partnership object for each possible paring permutation that the linkage algorithm identifies and then to place the children possibly for each permuted partnership into the list of children, however it can be easily seen that the massive number of partnership objects that this would cause to exist would be difficult to understand and to abstract the possible pedigrees from. Also maintaining the current interfaces would mean that there would be nowhere in the structure to indicate the likelihood of one linkage solution over another and the provenance and reasoning behind each edge.

From the above it can be seen that the interfaces need opening up and modifying to allow more freedom of expression. The approaches discussed below first focus on creating a set of interfaces which are sufficiently expressive followed by considering ways to apply constraints to these structures to restrict complexity of the created genealogical structures.

Case study

The reason for the adjustments that are required to be made to the interfaces and the design of the created data structures are best seen when case studies reflective of real genealogical possibilities are considered and how the required expression can be achieved.

Child, parents case study

Firstly we can consider a single child with a set of possible mothers and fathers. Biological we can be certain of the child having one father and one mother, although they may not reside within the dataset. Therefore for each possible parent there will be an amount of certainty associated with the link. There also will be an amount of consideration to be given to the linkage between each possible permutation of parental parings.

Working from these basic requirements and understandings we can start to define data structures which are compatible.

As can be seen in figure <Tree_a> a family tree depicts the given case study. In a sense this same diagram represents the given structure under the initial interface of a child with a parental partnership which in turn has a male and female member. If we are then to extend this to suppose that Y represents a set of males {B, C} and X a set of females {D, E, F} the initial structure is no longer able to express this. If we now consider the structure as laid out in figure <Struct_a> we see a structure where A is the child of the partnership alpha to which two fathers are linked and three mothers. This structure allows the idea of pairing between parents as well as a concept of parenthood, rather than a more free form structure as seen in figure <Struct_alt_a> when links exist solely between individuals. The introduction of links into the structures means that information can be attached to these edges that denotes the provenance for the edge between the two connected entities. It may make sense to add an edge between the tail of the partnership alpha and the child A, both to allow for information to reside here but also to maintain consistency in the structuring, this will be further discussed in the next section.

Child, parents, sibling (Same parental sets for both siblings)

The next case study considered contains multiple children of a single set of parents as depicted by the family tree in figure <Tree_b>. The initial though here is to add multiple edges to the bottom of partnership alpha as seen in figure <Struct_b>. This structuring allows the stipulation that the sets of parents of A as found in the previous case study extend to G and by the nature of the structure that whichever parental pairing is taken for A must also be taken for G. However given that we wish not to make assumptions regarding the underlying data available to us it is possible that the set of fathers and mothers for A and G will not be the identical given the complexities of linkage processes and thus it is likely that the sets offered will be a subset, superset or intersect of one another. If we extend this into a new case study the issue can be made clearer.

Child, parents, sibling (Same parental sets vary between siblings)

The next case study shown in figure <Struct_c> builds upon the previous structure but introduces the stipulation that A's set of fathers is {B, C} thus intersecting G's set of fathers which are {B, H}. This can be seen in the colourings present in <Struct_c>. However if we now remove the assumption that A and G are full siblings and that they could be half siblings or unrelated we introduce the possibility that the parental partnerships of A and G are not the equal and thus that the current structure is unable to express the desired pedigree. The only time we can make use of this structure is where we can be certain of A and G sharing the same pairing of parents, which we cannot assert without more complete knowledge of our data, which we are not able to assume. Therefore we need to further generalise the use of the structure to express this.

If we consider figure <Struct_d> we can see a more generalised way of expressing a possible sibling relationship between A and G with the further addition of a possible mother I to person G to demonstrate a latter point. This allows for a wider set of possibilities to be presented in the given structure. This set of possibilities includes the possibility that A and G both have an entirely distinct pair of parents (e.g. {A: C, F}, {G: H, I}), that they are half siblings either by a shared mother (e.g. {A: C, D}, {G: H, D}) or a shared father (e.g. {A: B, F}, {G: B, I}), or that they are full siblings (e.g. {A: B, E}, {G: B, E}).

Next if we reinstate the stipulation that A are G are siblings. We cannot return to the structure as seen in figure <Struct_c> due to the need to maintain the additional information pertaining to the possible discrete parent linkages and especially in the light of uncertainty as will be further discussed later.

If we introduce a sibling intermediary object as can be seen in figure <Struct_e> we can infer that A and G are siblings and from which build a picture with greater certainty of the likely topology of the pedigree.  

An aside note about inferring siblings with certainty without definite knowledge from census or similar data. This is not something that would be present in the current Digitising Scotland dataset but as stated at the outset the designed structure aims to be general enough to express any logical possibility and thus not be dependent on representing linked data only arising from a certain specification of 'paper record'. An example of a real 'paper record' from which a certain sibling linkage could be inferred could be seen in family census records.

Also the people linked to a sibling object cannot be asserted absolutely and thus multiple people may emerge from either end of a sibling object, this will be explored with a more complex example in the case study see in figure <FIG>. Before discussing this further though it will be useful to discuss the edges in the graph and the annotations that will be found upon them if the structure is to fulfil its requirements.

Uncertainty

Now that we have constructed a structure with a reasonable degree of expression and started to put in place approaches to constrain the permutations of such where further logical information is held, it may be worthwhile to discuss the uncertainty within the structure before moving on to considering how the structure scales, both computationally and conceptually.

As can be seen in figure <Struct_e> there are multiple edges emanating from the right connection point of the object alpha, these represent three possibly mothers of A, however we know that in reality it is only possible for one of the persons D, E and F to be the mother of A. However given the uncertainty inherent within linkage our structures are not desiring to make a definitive affirmative indication of a single edge, but instead look to present a range of edges. The usability of the given edges nether less will benefit from having a metric of which edges are more likely and which are less.

The root of any linkage lies in the 'paper records' of the original datasets, therefore from an informed human perspective it is important that these records which give provenance to a linkage are identifiable on each edge. The underlying certainty of a given edge will either need to be provided by the linkage process or for it to be possible to recreate the certainty value from the provided provenance records. The use of these values when queries are made is discussed in section <SEC>. The placing of information on edges will require some significant changes to the interfaces which are discussed in section <SEC>.

One to one object enforcement

Another important concept within the defined structure is of one to one object enforcement. It will be important to ensure that the underlying linkage problem will enforce this constraint on the produced set of linkages. This assertion can be made from a set of absolute truths that are defined by the nature of all 'paper records'. Take for example a birth record there is no more than one for each person detailed in the data set therefore we can enforce that only one person be assigned to the base of an intermediary partnership object and then the attachments to its mother and father points are the possible sets of parents in relation to the linked child. The enforcement of such allows for a structure which can be addressed from a single person and the uncertainty is encapsulated in the 'sideward steps' in the structure. This gives sufficient expression in the data structure to express the logical genealogical possibilities and therefore there is no reason to allow the uncertainty in the structure to spread beyond its current place.

The sibling bridges that exist in the structure also will need to be subject to the same one to one enforcement. If we consider a census record that details a family schedule with 3 children named the grouping of possible individuals whom they could possibly link to by the identifiers A, B and C. We can logically deduce that each possible individual has two siblings and so will be attached to two sibling bridges as shown in figure 2 <FIG 2>. By limiting the number of sibling bridges to the number of definitive sibling possibilities presented in the paper records we can be sure that every sibling bridge in the structure represents an actual genealogical relationship. This is opposed to an approach of creating a sibling bridge for each possible permutation of sibling relationships between those found in the sets A, B and C. This would lead to a need to attach a certainty heuristic to each bridge as to decide which are most likely to be true and to prevent the creation of more sibling relationship than records exist for. In the suggested bridges structure the uncertainty values are limited to the edges between the intermediary objects and the individuals (the calculation of an overall certainty heuristic value will be discussed in the querying approach) but also inherently enforces that only one individual can be the correct attachment to an end of a bridge removing the need to then have a set of certainty heuristics pertaining to the existence likelihood of a bridge. An issue that arises from our now defined bridge approach is of the same individual being attached to both ends of a sibling bridge. From a linkage viewpoint we could expect for this to happen if two siblings both have the same forename as both names on the census records will likely by overlaid on both birth records of the same name. Logically we would expect the linkage algorithm will not make such a suggested linkage as it will be able to identify that it is attempting to identify as siblings of one another a single individual. Given this we assume that this will not be an issue that our representations but when creating the structure we will code defensively to prevent the presentation of an individual as a sibling of itself. However if it is not possibly to assume such behaviour from the underlying linkage process then we will need to do further work to identify ways to restructuring sibling bridges within our implementation to remove the self-linkage while maintaining the remaining set of suggested possibly siblings.

Extending Sibling Bridges concept to Marriages

We have now laid out a way to attach intermediary objects into the structure that make bridges between individuals that represent a collection of genealogical relationships. In the sibling case this collection is the unification of two parent child relationships, although these may not necessarily be present in the dataset explicitly. The sibling bridges can exist in two environments. Either alone without the common parent being present of identified (as could be derived in <FIG 2>) or alongside other intermediary objects which therefore allow for two possible 'paths' across the structure. It would be reasonable to expect that the presence of two paths (arising from different source records) across the structure both giving the same conclusion increases the certainty of the underlying genealogical relationship. It would be possible to see either path being a supporting path to the other but given the sibling bridge makes a bridge across the structure we would prefer to see this as be the supporting path to the implicit child-parent-parent-child path; although in the presence of only a sibling bridge we can make use of the bridge to build good genealogical structures. This concept of using additional source records as bridges within the structure to give more certainty and reasons can be extended to other sets of source records. If we consider marriage records we can explore how these can be used to act as supporting records in a similar vain to that of sibling bridges. In the case of marriage records they attest to social relationship structures rather than genealogical relationships but due to cultural norms we can make genealogical relationship decisions due to their close relatedness; for example adoption, wills, life insurance and next of kin. 

If we consider <Struct_f> we can consider the value of bridges in the data structure that derive from social constructs rather than genealogical decent. A marriage bridge has been added into the structure when shows individuals D and J as a possible spouse of B. J has been added into the example to demonstrate that multiple individuals can be attached to either end of a marriage bridge, however their sex must be representative of the correct end of the bridge, in the case of all diagrams with the left being male in the case of the husband and the right being female in the case of the wife. However if we suppose that the certainty heuristics on the edges attaching B and D to the bridge are most significant then we can begin to deduce the effect that the information in this bridge implies for the wider structure. Given more traditional social norms it would be expected in a reasonably number of cases that the parents of a child will at some point be married and so a marriage record will exist. The record of the marriage gives rise to the bridge in the structure and would lead to a natural assumption that it is more likely that B and D have born children together, thus increasing the likelihood that A and G are children of B and D. 

At the point of query it will be important to create a mechanic that is able to combine the certainty heuristics of a set of edges with the query area and produce a combined heuristic representing the most likely 'bigger picture' pedigrees from the structure. This combination mechanic when dealing with social indicators of genealogy will need to make consideration of the change of such influences on certainty heuristic over time. A consideration of geographical location and individual indicators (i.e. religion, political affiliations, occupation, bumper stickers) would need to act as a proxy of cultural influence.

In the case of <Struct_f> we could also see how if the marriage bridge created a link between C and F instead that it would increase the likelihood of individuals C and F being the parents of A and leaves the parents of G to be unaffected by the marriage bridge and to be handled separately - although in this case it is better to suppose such a pedigree in the absence of the sibling bridge.

One idea though upon in the design of this model was the possibility flattening of the marriage bridge atop of the child bearing partnership alpha. Under the structure proposed in <struct_b> this would be a possibility, however in the breaking apart of siblings into separate child bearing partnerships we prevent ourselves from doing the same in this case for the same reason that breaking apart the siblings was necessary. This steps from the need for the defined structure to remain flexible and preserve the uncertainties produced in the linkage process, as to do otherwise would result in both the loss of information that allows us to present more informed queries and also make the application of a marriage bridge very heavy handed. For example in the case of <Struct_f> if we are to flatten the marriage bridge upon alpha we make a further stipulation that the members of the marriage record must also be the parents of A - which in the world of out structure to support uncertain data we will not be able to say. A possible refutation of such would be to consider that in our structure B and D are a married couple but the actual parents of A are C and E, if we had enforced the flattening of the marriage bridge onto the child bearing partnership then it would not be possible for this pedigree to be suggested. The underlying issue here is that by the flattening we would imply that the genealogical action is a certain influencer of the social construction which is an assumption that we know not to be correct.

A small takeaway from the idea of flattening the marriage bridge onto the child bearing partnership is the value of using these bridges as supporting records to the partnership and the possibility of considering multiple bridges that could pertain to the partnership. This would be probably to best done by traversing the structure to find bridges attached to the individuals who are attached the partnership rather than parking the details of the associated bridges on the partnership object.

The structure that has now been defined allows for us to create expressive genealogical structures which are able to be constructed with an appreciation of uncertainty arising from the underlying linkage process. We have explored the use of both genealogical based relations as the central element of the structure, although have remained source record agnostic throughout. The structure is also able to make use of social constructions that have genealogical implications to provide support in making decisions. In the given example in the case of marriage but possible further research could look at considering other social and cultural based concepts to support genealogical linkages in cases such as adoption. 

Queries

Next we will consider approaches to querying and drawing localised pedigrees based order by certainty heuristic from the defined structure.

Before considering how to query the structure it is useful to outline the queries we need to be able to make. In this paper we will restrict ourselves to considering parental, child, sibling and marriage queries. These act as the building blocks for traversing any genealogical structure and more complex queries can be built using these; the optimisation of the combination of these initial queries will also be briefly discussed but represents an interesting area for further research which pertains more to the complexity of the approach than the power of the structures querying approach.

Parent Queries

The parent query is summarised as given person A find the possible set of mothers or fathers. The query approach is much the same weather or not we are looking for possible fathers or mothers, therefore this following paragraph talks about finding fathers but can be applied equally to mothers.

The structure that we have defined details that to find the father of a person we must first identify the set of child bearing partnership to which the child is attached. Identifying and traveling along this edge is a simply process due to the one to one enforcement of birth records to data structure objects means each person is attached to at most one child bearing partnership. As the relationship between the child and the partnership object is one to one the certainty heuristic of the edge between the two can be asserted to be 1 (i.e. without doubt). From the partnership object we can then consider all the attached males. Each will have an associated supporting evidence records and a certainty heuristic as output by the linkage process (or calculable from the given evidence records). The combination of the heuristic values for each with the initial edge heuristic will then be a reasonably simple multiplication with the initial edge. A father that can be linked by alternative paths back to partnership object will be weighted more favourably. Considering <fig 3> such a weighting will be added within the formula where h is the certainty heuristic for the given edge:

α.h x β.h + Fm(γ.h x δ.h x ε.h) + ...

The factor Fm is used to scale the impact value of the additional weighting. This will comprise an element of the significance of a marriage bridge based on the rate of occurrence in the structure compared to the expected rate for the original population and another element pertaining a cultural approximation of the weighting of marriage in the year of birth of the child.

By considering each possible father in this way a set of fathers will be identified with associated combined certainty heuristics. By ordering these it will be possible to identify the set of most likely fathers.

The process is the same in the case of mothers.

Child Queries

The approach to the child query is similar to that of the parent query. The same traversal across the structure is being made but in the opposite direction. The same idea of using social constructions such as marriages bridges to add weight to child with whom the father has greater alternative linkage paths can be used to give a greater heuristic weighting to a particular child. In the child case it is also possible to extend this alternative paths to consider sibling bridges as well - for example using a premise such as my sibling’s father is likely to be my father too. This is laid out in <fig 4> with the combined heuristic being calculated using the formula:

α.h x β.h + Fm(γ.h x δ.h x ε.h) + ... + Fs(ζ.h η.h θ.h ι.h) + ...

The factor Fs is again a scaling factor and will add an impact value weighting that comprises of considering the number of sibling bridges in the structure compared to the expected number of bridges based on an estimation of the number of sibling bridges could exist in the population from the size of the population and the average number of children per family for the given setting as defined by the below formula:

Approximated number of sibling relationships in population = (((average children - 2)^2 + average children + 2)(population size - 1)) / 2(average children + 1) {average children ∈ R | average children > 1}

No cultural approximation is involved in the factor as sibling bridges are based upon genealogical relationships rather than a social indicator of genealogical relationship.

The use of these factors would not be necessary if we believed that the supported records existed for all sibling relationships, however given the patchy nature of genealogical datasets and access being able to forecast how significant the bridges that do exist are to the structure.

Sibling Queries

There are a number of nuances to sibling queries due to the varying degrees of relatedness that siblings can share. 

Half Sibling Queries

The approach to half sibling queries will look at identifying the siblings arising from either the father or the mother. The query approach is much the same weather or not we are looking for possible fathers or mothers, therefore this following paragraph talks about finding siblings on fathers side but can be applied equally to the mother’s side.

The query will need to state the person for whom siblings is being found. The first step in the query will be to identify the partnership of which the person is the child, from here the set of fathers can be considered. Each possible father will be linked to a number of other child bearing partnerships and each of these will have an attached child whom is a possible father side sibling of the initial child. Given the additional traversal steps compared to the other queries a larger number of results are likely to be found but this is to be expected given the branching nature of the genealogical structure. Each of the identified possibly siblings will need to have a combined heuristic value calculated. This makes use of the same formula as laid out in the Child Queries section in conjunction with figure 4.

Full Sibling Queries

The approach of the full sibling approach is to identify the union of the half sibling results for both mother and father's side sibling. The combined heuristic value in this case is calculated using the following formula in conjunction with the edge labelling’s seen in <fig 5>:

(((α.h x β.h x γ.h x δ.h) + (α.h x ε.h x ζ.h x δ.h)) / 2) + Fm(ι.h x κ.h x ε.h) + ... + Fs(η.h x θ.h) + ...

Here the main constituent of the value is made up of the average of the parent combined edges and intermidiary paths with the weighting factor consisting of any marriage bridges linking the two parents and also the any sibling bridges linking the two children.

Sibling Bridge Queries

The bridge sibling query is limited in its usefulness but may have some uses from an administrative viewpoint. The approach of the bridge sibling given a person is to consider all the sibling bridges of the individual outwith of the content of direct genealogical relations. Therefore this method will be more useful in addressing siblings whose common parent falls out with the dataset or is unidentified. The certainty heuristic in this case is calculated by use of the following formulas in conjunction with the edge labelling’s seen in <fig 6>:

In the half sibling bridge case:
α.h x β.h + Fs x MAX(η.h x γ.h x δ.h x θ.h, η.h x ε.h x ζ.h x θ.h) + ...

In the full sibling bridge case:
α.h x β.h + Fs(η.h x γ.h x δ.h x θ.h) + ... + Fs(η.h x ε.h x ζ.h x θ.h) + ... + Fm(ι.h x κ.h) + ...

Where the sibing bridge indicates that they are half siblings then the main component of the value is made up of the enges attaching the two individuals to the sibling bridge. The weighting factor increases the value by the maximum likely alterative path combined heuristic.

In the full sibling cases the main compontent again is made up of the edges attached to the two indivudals to the sibling bridge. The wieghting factor is comprised of the the combined alternative sibling paths with scaling and the paths of any marriages containing the two common parents.

Child Bearing Partner Queries

The approach of the child bearing partner query given a person is to first identify all the child bearing partnerships which the person is attached to. From each of the attached partnership objects we can then consider all the other attached individuals of the opposite sex. Each of these is a possible child bearing partner for which a combined certainty heuristic can be calculated using the following formula in conjunction with the edge labelling’s seen in <fig 7>:

α.h x β.h + Fm(γ.h x δ.h) + ... + Fc((α.h x β.h x ε.h x ζ.h + Fs(ι.h x θ.h x η.h x κ.h)) + ...

The factor Fc is used to scale the impact value of the additional weighting. This will comprise an element of the significance of there being multiple possible children born between the initial individual and the other individual to the certainty heuristic of the likelihood of the two individuals being child bearing partners. The factor Fc will therefore make use of an approximated value for the representation of the supporting marriage bridges to a value of relational monogamy expected to be seen in the real population, calculated by:

Fc = (2 x marriage bridges) / (population size x proportion of real population married)

Marriage Bridge Queries

The marriage bridge query is of a similar ilk as the sibling bridge query which is again more record administrative focused. The approach taken is to consider all the marriage bridges of the given individual. Given the social construction of marriage the bridges when queried need to be seen as social indicators of genealogy than genealogical indicators. Such a query however still has uses with a wider consideration of linkage when a focus is needed upon social and cultural structures; for example when researching the effects of social policy and legislation on a population. Once the set of marriage bridges has been attained then the set of individuals attached to the other side of each of these can be considered and a combined certainty heuristic can be calculated for each using the follow formula in conjunction with the edge labelling’s seen in <fig 8>:

α.h x β.h + Fc(γ.h x δ.h) + ...

The additional weighting increases the certainty heuristic of the marriage if child bearing partnerships between the two individuals exist. The weighting is scaled with a factor representing the recorded monogamy across the wider population.

Further Queries

There may be gronds to consider further queries as the need arrises, these may look at making larger step traverses accross the population for example in the process of identifing the set of X degree cousins of an individual. Also in the presence of further social infering briges within the structure it would be possible to factor these into the scaled weighting values within the combined heuristics calculations.

Before moving on to consider the approaches to and value of textual justification it is useful to discuss the need for the combined heuristic calulucations within a represntation model of linked data due to this being atypical. Traditional approaches to linked data look to make sets of potntial linkages but then before the outputing of this data runs an algorithm to create a best fit set of links that are then returned. However in the case of the hypothetical linkage process we consider here does not seek to return a best fit linkages and instead returns a set of uncertain probablistic linkage possiblilties. This means that while multi-step (i.e. siblings, cousins) queries are inheitently presented as certain within a best fit linkage they cannot be with a linkage approach which exposes uncertain in its results. However we still need to be able to construct multi-step queries in our data set and therfore a way of evaluating the combined certainty heuristic of the given query has to be defined. This value as can be seen from the above formulas draws on the heuritic values of the traversed edges and also considers supporting cycles in the graphs to add more weighting to the individuals supported by these cycles. The presence of this concept at the representation level of the data set appears to be nessersary in the inital outlining of the idealised linkage algorithm laid out in the introduction, although at the point of implementation of the idealised linkage algorithm thought should be given to ways that the combination formulas can be encapsulated into the linkage process. This may require a reconsideration of the where the line between linkage and represntation is drawn when designing linkage aglorithms that expose uncertainty.

Textual Justifications

A resoanable amount of information will need to be returned for each query if the uncertainty in the structure is to be full indicated accross the multiple possible results for each query. The natural results set in computing would be to return a list of identifiers and coded values to the query that can then be interpreted by a trained user. However this step of training serves as a stumbling block to a wide range of users being able to make use of the representation system and by exstension linked data with uncertinty. Therefore time has been given over to look at approaches of expressing query result sin natural explanitive language.

The information we want to return at the point of query includes: the type of query, the possible individuals that have been identified, the combined certainty heurustics, the supporting bridges and the underlying source records that support the traversed edges in the data structure.

Therefore a summerised way of textually representing this data may take on a form for a sibling query such as:
The most likely father side sibling with a heuristic value of <0.X> is individual <person> with <person> as the common parent supported by the evidnece in records A, B and C.

Some amount of language tailoring thorugh each subsequent line may also be useful to set each line in its surrounding context but ponly to a limited extent as to vary language style too much may lead to a lack of a conistent framework; which can be good to maintain across texts pertaining to similar entities. Also considering how to best present the heuritic value in the textual justification is important. To present them as a numeric value allows for a better technicial understanding of the returned data. However, to present this in words may give a textual justification that is easier to understand for non technical users and also may offer the opertunity to choose the postive strength of the heursitic indicator word in light of the strength of nearby links as opposed to on a predefined scale. The explantation of the way in which the source records and their associated parts support the linkage will also need further consideration at a later point. In order to support this would require for the implementation of this module to be source record structure specific. This raises a number of issues due to the number and variation of record types and also needing a better understanding of how the idealised linkage process is performing its linkage, which is beyond the remit of this dissertation. However, here it is still important to offer a genealised evidence structure whose intergration with an underlying linkage could enable the afore mentioned information to be presented at a point in the future. The discussion of whether such evidnece information, including indication of the supporting part of the record would be stored and output from the linkage process or would be calcualtable post linkage, given an abstracted set of the linkage algorithms will require further research. However, in the event of a post linkage approach being taken further dicussion of the splitting point between linkage and representation in the idealised structure would need to occur, as already mention in relaiton to the combined certatinty heuristics.
	
Query Language

If linked data is to see wide spread usage then it will require that the use and availaiblity of both sutible datasets and also tools to perform linkage are made more widely availaible; the former of these is based on a number of elements but notably public support, this will be discussed in more detail in the <SEC>. An element of making linkage system that are availible and easy to use points to a need to offer a way to infeterface with linked data sets that does not require a high level of technical understanding. The above discussion of textual justifications has a role to play as well as creating a way for people to form queries that is abstrated away from the code base.

A query language for interacting with uncertain data would be a good approach to doing this. The query language would need to offer the functionality to make the block queries availaible to the user, these being; father, mother, child, child bearing partner, marriage partner, half sibling, full sibling, sibling bridge.

It will also need to offer the ability to link these queries together to allow wider traversals of the structure to be made, in this case it will be benificial to offer loops within the languguea. Loops would be especially helpful in the forming of ancepstral line queries. Also it would be useful for the langugage to offer the ability to set a minimium certainty value to be considered significant wnought to make returning a result worthwhile. Functionality to set this as a global parameter and also at the point of query would be useful. Based upon the ideas explored of using social and cultural values in the weighting elements of the certainty heurustic providing the functionality to adjust and override these within the query langugae may also prove useful, although the control of these via a confiig file (or as a global parameter) may be a more standrrdised way of holding these values given the change in them over time based upon dates found in queryied records. Also offering flags to be used with queries to choose if a textual justification or a numerical based value should be outputed in responce to queryies.

The implementation

In this section I will talk about the details of the implentation of the proposed structure. The purpose of implementing the structure had benifits in allowing for the consideration of variations of the structure as well as providing a frame work as a proof of concepts and to consider in the evaluation procrss.

As mentioned earlier a set of interfaces were used as the starting point of the structure, however these have seen considerable changes to reflect the different structuring of a link based population and also due to the need to break apart the IPartnership interface which implied that children have to be born out of marriages. However, at the conclusion of this section we will look at structuring a new set of interfaces which enable backwards compatability with the old interfaces while still supporting the new structures that we have created in the linked population.

Linked Persons

The linked person is a slight adaptation on the Person classes on the other Person models within the project (i.e. Organic) which implements the origonal version of the IPerson class. The changes made were to move over any integer identifier return values to return a link object contatining the object of the given identifier and the supporting information and heuristic which pertains to the relation between the two objects. The same extends to where lists of integers were orignally returned. These adjustments allow for more information to be stored in the structure, these can be seen as annotations on the edges of the graph. Also each Person has a list of links which identifies possible child bearing partnerships, marraige bridges and siblings bridges which the individual may be a member of. These enable for the linked structure to be built with the people within the structure able to be linked to intermediary link objects in keeping with the underlying source records. The use of these lists of links from an object oriented viewpoint can be seen in <FIG 9>.

Intermediary Link Objects

The structures explored in the design section can be seen as graphs with a number of nodes and edges. The edges are links that will be discussed in the next section. Any of the nodes that are not people are exstentions of the abstract class Intermiday Link objects. What the link object represents depends on the class instance that it has initalised. The decision to maintain the implementation approach of using objects inbetween people as found in the earlyier population models is partly due to the continued implementation of the IPopulation interface and also the centralised control of each of the objects in the population instance.

The abstract class offers two lists of links. Each list pertains to the set of individuals that are linked to either end of the object, each instance is given a unique ID and also a reference name, although this has only been added improve understandarbility of case studies which will be further discussed later.
	
	Childbearing Partnerships

The childbearing partnership object extend the intermidary link object class and makes use of the two lists of links, one for possible fathers and the second for possible mothers. It also adds a link of its own to attach the child to the link object. The childbearing partnerhip is use to implement the T shaped objects seen thorugh the earlier examples. Methods are also offered to abstract over the number labellings of the lists of links so that they may be accessed by the term of father or mother for ease of une and population constructions.

	Bridges
		
The implementation of bridges in the structure also extends the intermidiary link object making use of the two lists of links.

		Marriage Bridges

Marriage bridges also implement the link adapted IPartnership <CHECK> interface which enforced that information pertaining to the marriage event is accesibly. Marriage briges also provide specialised methods to indicate the correct use of the lists.
		
		Sibling Bridges

Sibling bridges also offer a pair of specilised methods to indicate correct queue usage and contains the sibling type enum to provide further detail about the nature of the represented sibling relationship.

Links

The Link class is the most imporant class in this model. The link class enables the storing of the supporting information at the places where it is most relevant. A link always joins together a person and an intermidairy link object. A link also has a heuristic value for certainty and holds an array of evidence object which indicates the provenance of the link based on the underlying source records. Link initialisation is self referencail and uses the single constructor to attach the possible partners/parents/siblings to the correct intermidiary link object. A second constructor is providing for linking a child to the base of the childbearing partnership.

Evidence

The evidence class provides information about the underlying source records and the part of the record which was notable in this case. The implemnation here limits itself to identifying the record ID, type and the part of the record supporting the given linkage. These are then used later in the textual justification to further demonstrate the ways of giving better explanations in datasets with uncertainity. The limited implementation of evidnece, as noted above, is due to the need for a defining of the underlying linkage approach to evidnece identification and output. Also the large number of record types that would need to be surveyed to be sure of createing a genral class able to be used to communicate the full nuancing of the various record types extends beyound the time limitations of this disseratation.

Types

A number of Enum classes are used to organise and control sets of options in certain areas of the model.

	Query Types

The query type enum details the full set of possible queries. It is used to identify the query type and query time and at the return point for resulats and also for textual justifications. The currently supported query types are:
	CHILDREN
	FATHERS
	MOTHERS
	CB_PARTNERS
	MARRIAGE_BRIDGE
	FULL_SIBLINGS
	FATHERS_SIDE_SIBLINGS
	MOTHERS_SIDE_SIBLINGS
	SIBLING_BRIGE

	Sibling Types

The sibling type enum details the type of siblings a bridge represents, these type are:
	CONFIRMED_HALF_SIBLINGS
	CONFIRMED_FULL_SIBLINGS
	CONFIRMED_HALF_POSSIBLE_FULL_SIBLINGS

The sibling types are used <IMPLEMENT>

Result Objects

During implemenation it became apparent that due to the complexity of the query outputs that a class instance would be nessersary to store a query's result. Also the careful strucuring of the ResultObject class would also lend itself to being able to be passed to other methods to perform analysis or operations on the query output, for example textual justifications.

An array of result objects is returned when more than one result is found, meaning that a single result object handles only one result of the query.

A results object constains the following information:
rootLink (Link) - the individual given as the parameter to the query.
brachLink (Link) - the individual identified as possible solution.
intermidiaryLinks1 (Link[]) - where more than two edges have been traversed in the graph then these Links are stored in this array.
intermidiaryLinks2 (Link[]) - if a secondary path exists linking the root and branch individual that pertains to the query then the Links of the given path are stored in this array.
supportingSiblingBridges (SiblingBridge[]) - any sibling bridges that support the given result are placed in this array.
supportingMarriageBridges (MarriageBridge[]) - any marriage bridges that support the given result are placed in this array.
failedTestPersonRoot (LinkedPerson) - if null then the query has excecuted else if a person if found here than the query has failed and the individual given in the paremeter is found here.
combinedHeuristic (float) - the combinded heuristic is a value representing the linkelihood of the given query result.
queryType (QueryType) - Used for the explanation and labeling of the result object.

The result object offers a full range of expresibility and due to its clear encapsulated structure will be able to be passed as an object to other processes to run further analytics upon it.

Population Queries

In this section an overview of the parameters, output and expected behavoiur of the population queries is given. To make use of the population queries it is nessersary to create an instance of the class, passing the population to be queried into the constructor. The created PopulationQuery instance can then be called to make queries. This can be done using the below code snippet:

LinkedPopulation pop = UseCases.generateNuclearFamilyUseCase13();
PopulationQueries pq = new PopulationQueries(pop);
Utils.printResultSet(pq.getPotentialFatherSideSiblingsOf(3));

Get Parent Queries

Method names: getFatherOf, getMotherOf

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible father/mother
intermidiaryLinks1: empty array
intermidiaryLinks2: empty array
supportingSiblingBridges: empty array
supportingMarriageBridges: empty array
queryType: FATHERS/MOTHERS

The query finds the person in the population with the given ID p. The set of parent partnerships is then considered in turn with each father/mother found placed into a results object and resturned as an array containing all the possible results of the query.

Get Children Query

Method name: getChildrenOf

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible child
intermidiaryLinks1: empty array
intermidiaryLinks2: empty array
supportingSiblingBridges: empty array
supportingMarriageBridges: empty array
queryType: CHILDREN

The query finds the person in the population with the given ID p. The set of child bearing partnerships attached to the person are then considered. Each child within these is placed into a results object and all of these are then returned in an array.

Get Childbearing Partner Query

Method name: getChildbearingPartnerOf

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible childbearing partner
intermidiaryLinks1: empty array
intermidiaryLinks2: empty array
supportingSiblingBridges: empty array
supportingMarriageBridges: possible marraige bridges joining the root and branch individuals
queryType: CB_PARTNERS

The query finds the person in the population with the given ID p. The set of child bearing partnerships attached to the person are then considered. Each individual on the oposite side of the partnneship is placed into a result object. If any marriage bridges exist between the root and branch individual then they are placed into the supporting Marriage bridges array, this also causes for a weighting factor to be added to the combined heuristic as defined in the combination function.

Bridge Queries

Method names: getPotentialMarriageByBridges, getPotentialSiblingsByBridges

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible spouse/sibling
intermidiaryLinks1: empty array
intermidiaryLinks2: empty array
supportingSiblingBridges: empty array/currently considered sibling bridge
supportingMarriageBridges: currently considered marriage bridge/empty array
queryType: MARRIAGE_BRIDGE/SIBLING_BRIDGE

The query considers each of the specified bridges of the given type for person P where the persons ID is equal to p. Each person on the oposite side of the considered bridge is placed into a results object with the bridge used in identifying the result placed into the correct bridge array.

Get Sibling queries

Method names: getPotentialMotherSideSiblingsOf, getPotentialFatherSideSiblingsOf

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible sibling
intermidiaryLinks1: the edges/links between the root and branch individuals
intermidiaryLinks2: empty array
supportingSiblingBridges: possible sibling bridges joining the root and branch individuals
supportingMarriageBridges: empty array
queryType: MOTHERS_SIDE_SIBLINGS/FATHERS_SIDE_SIBLINGS

The queries here make use of a common method getPotentialXSideSiblingsOf into which they pass differeing parameters for the potentail mother/fathers list of links. From here each individual in the given list has every other child bearing partnership to which it is attached considered and the linked children of each added to a result object. The additional links between the root link and the branch link are stored in the itermidiary links 1. Any sibling bridges that connect the root and branch individuals are placed in the supporting sibling bridges array.

Method names: getPotentialFullSiblings

Successful Query Output (parameter: p)
rootLink: P - given parameters corresponding person
brachLink: possible sibling
intermidiaryLinks1: via father intermidiary links
intermidiaryLinks2: via mother intermidiary links
supportingSiblingBridges: possible sibling bridges joining the root and branch individuals
supportingMarriageBridges: empty array
queryType: FULL_SIBLINGS

The query first retrieves the two result object arrays by calling the father side and mother side queries. The union of these is then considered. If a possible sibling appear inboth arrays then it is added to a new result object with the intermidiary links from each of the orgigonal results object being placed into the new results object. Any sibling bridges from the origonal results are also placed into the new results object but with duplicates removed.

The queries outlined shown a consistent and resiliant formating of results and offer a full complement of starndard genalogical step queries which enables any custom traversal of the structure to be made using a combination of the provided queries.

Textual Justification

The textual justification class takes in an array of results objects as a parameter and based upon the qury type of the set of results outputs text accordingly. The array of result objects are all expected to contain the same query type. The textual justification class makes use of a series of if statements to check for null or empty results sets. In such cases informative error messages are returned. Otherwise the method builds a string tailored to the given query type that details each result in the array, including the root and branch individuals, combinded certainty heuristic, query type, the evidence and supporting bridges. Also in the case of the most likely object in each result object array it is textual described at the 'most likely' with the others described as 'possible'. Also the combined certatinity heuristic is explained using a relative textual term <CHECK>. The method returns a string that the user may then manipulate or read.

Use cases

A wide range of 18 use case examples can be found in the class UseCases. They can be generated by calling the static method for the required UseCase. A LinkedPopulation instance is returned containing the requested use case.

The use cases created are based around 7 initial use cases with the further 11 use case created by adding slight permutatons to the some of the initial use cases. Further discuss of the use cases and there expresivness and usability will be undertaken in the evaulation section.

Creating new use cases 

The approach to manualy creating use case in code can be seen in the UseCases class. The general outline to doing this follows the steps:
- Initilise a LinkedPopulation instance
- Add LinkedPersons to the population
- Create Evidence
- Initilise ChildBearingParnerships and add to population
- Attach persons to their parental partnership (with Evidence)
- Attach parents to their possible partnerships (with Evidence)
- Initialise SiblingBridges and add to population
- Attach persons to their possible sibling bridges (with Evidence)
- Initialise MarraigeBridges and add to population
- Attach persons to their possible marriage bridges (with Evidence)

Test methods to enforce correct construction are dettailed in the Tests section.

It is quickly apparent that the construction of these populations become time consuming to perform by hand, therefore if we are to build larger testing structures then a better appraoch will be nessesary.

Already within the Digitising Scotland code base are models for generating large scale populations that are able to produce populations that representative of specified statisitical distributions. However, given the changed made to the interfaces and the need for the LinkedPopulation model to contain evidence and bridge objects the OrgainicPopulation generator cannot be used without considerable modification. Also the multiple linkages that exist in the Linked structre will require for the population generation model to induce incertatinty and multile mossible linkages into the population. This means in some way simulating the linkage process to some degree, which in itself presents a futher challenge for which the time does not exist to address here. Also such a model would want to look at ways of introducing typographical and record error as well as record loss. Beyond simulating the linkage the other option would be to perform the real linkage but as of yet no such algorithms exist to do this to the specification idealised upon throughout; this will be discussed more in the future work section.

Utils

The utils clss offers a range of utility methods that print various objects such persons, links and result object details to the console as well as offering commonly used functionality throughout the projectsuch as specialised array ordering and joining. The code in of itself should be self documenting here.

Tests

The tests provided check to enforced that the populations is consistently structured. This is done by considering every individual in the population and then travsing away from them over every link attached to them to reach all the imidiately attached persons. Then for each person all the persons imidiately next to them are found. If the initial person if found to be in this se of people then we have demostrated that the graph is structured correctly between these the initial individual and all individuals imediately reachable from them. If we can confirm this for all persons in the graph then we can guarantee all the links and intermidiary objects are correctly formed. This is checked for parents relationships, childbearing partners and for both bridge type <IMPLEMENT>.

Testing of quering methods has been performed by hand and comparing the returned queries agains the structures as seen with the use cases to ensure the correct results are being given.

Interfaces

The intial iterfaces have been adapted in a number of ways. The way in which they join to each other has been redifiend introducing Links between them rather than single integers to references one another. Also the old IPartnership interface has how been split into two versions, one for child bearing relationships and one for marriage relationships. This means there is no longer a need for marriage to be stipulated because of child bearing or vice versa. In the end it was decided not to fold the interfaces back into the origonal interfaces as the stuctures we are now representing, due to there inheiant uncertainity, are too far removed from the other models that for them to be presented by the same interface would become messy. It was considered that the Linked population model could implement both sets of interfaces. However, given that information would have to be lost in when meeting the calls in the origonal interfaces this would lead to ambiguity in the data. For example returning the list of possible parnership objects without the assocciated certatinty heuritics would leave no way of distinguishing between two highly probably partnerships which likely indicate the indivudal being the member of both partnerships and a highly likely and a much less likely partnership which indicates the person was only likely a member of one partnership in life. This introduction of ambigity which could lead to the returned data potenetailly being highly misleading lead to the decision that for the time being that the origonal interfaces shouldn't be supported until a way of allowing a degree of distinguishment within the origonal interfaces could be defined. This however is not to say that either set of interfaces are bad, but that they are working with data with distinctly different chacteristics. The approach taken to redefine the relationship interfaces however offers a real increase in expressibility of the model and it is likely that the Organic model would benifit from also adopting the approach.

SQL Database Adapter

To ensure populations were been properly created in the design stages before any amount of queries had been written a way to quicklyview the created structure was useful. Therfore I adapted the existing MySQL binding code within the project to output LinkedPopulations to a local database. The code to do this can be seen in the adapted_db package within the population represenatation package and the credit for the original code is to Dr Graham Kirby and Prof Alan Dearle.

To export a linked population to database the following code snippet can be used:
	LinkedPopulation pop = generateNuclearFamilyUseCase1();
	try {
		new ExportPopulationToDB(pop);
	} catch (Exception e) {
		e.printStackTrace();
	}

Evaluation and Use cases

The evaluation of this project will be lacking in detailed query time and data size to model size ratios. This is due to the aims of the project being less focused on highly optimised scalable code and more intrested in develpoing a structure that is expresive of the cases we want to model. Therefore the evaulation understaken here will look at the created model and consider a range of usecase and whether it is able to sufficiently express them inline the aims that we initially set outwith.

Obviously a consideration will need to be of the scalaibility of the model and a short discussion of these will be made and a few points outlined for ways in which potetionally percieved issues in this area may be addressed.

generateNuclearFamilyUseCase1

<C1>

The nuclear family use case contains three children, two possible fathers and 4 possible mothers. The uncertainity in the structure means that any combination of these that fits with the given edges could be correct. For example D and E could be the parents of A, B and C giving a standard nuclear 3 child family. However, another possible pedigree could be have F and I as the parents of A and then D and E as the parents of B and C, giving a distinctly different pedigree. The evidence on the edges however allows for us to calculate with a degree of certaininty the pedigrees that are more likely.

Other permutations:
Use case 7  - Add sibling bridges between {a,b}, {a,c} and {b,c} (onto use case 1)
Use case 13 - Add marriage bridge between {d,e} (onto use case 7)

The bridges in use cases 7 and 13 lead to an expected family structure that potetntially has D and E as the married parents of children A, B and C as shown in <UCT 7>.

Use case 8  - Add sibling bridge between {a,c} (onto use case 1)
Use case 14 - Add marriage bridges between {f,e} and {d,g} (onto use case 8)

The bridges in use case 8 and 14 lead to an expected family structure that potentially has F and E as the parents of A and C, and then D and G as the parents of B as shown in <UCT 8>.

generateNonCrossOverMultiGenerationUseCase2

<C2>

The multi generaltion use case contains three genertations and in this the non cross over case illustrates the possibility that two distintly different ancestrals lines for A can be stored within the strucutre. To summmarise the use case it can be seen that B is the likely father of A with either G or C as the mother, the decision on which is the mother then has onwards implications for the granparents of A.

Other permutations:
Use case 9 - Add sibling bridge between {g,c} (onto use case 2)

The bridge added in use case 9 gives an idea that G and C may be siblings, however the lack of any cross over between the parents of G and C points to the fact that such a sibling bridge may not pertain to both of them.

Use case 15 - Add marriage bridge between {b,g} (onto use case 2)

The bridge added in the use case 15 gives the idea that B and G are married, here the combined certainty heuristic approach of seeing social constructions as indicators of genalogy may idicate the G is now the most likely mother of A.

generateCrossOverMultiGenerationUseCase3

<C3>

This case is an exstenstion of case 2 but adds in a set of links which makes it possible that G and C share the same parents - thus potentially makeing them siblings.

Other permutations:
Use case 11 - Add sibling bridge between {g,c} (onto use case 3)

The bridge added in use case 11 further enforces the idea given in the additional links. Although this may not help for a better decision to be make regarding the mother of A, it does however allow us to be more certain of the grandparents of A (as they are both the paretns of G and C) and by exstension the constuction of a hereditary line through the mother.

Use case 17 - Add marriage bridges between {e,d} and {b,g} (onto use case 11)

The bridges added in use case 17 add further support to the idea the E and D are the parents of G and C supporet by the marridag ebridgre between them. The second bridge makes suggestion that B and G are married makinf it more likely that they are the paretns of A, as shown in a possible pedigree for this use case in <UCT 17> However as a note of caution in using social constructs to further support a supposed linkage it would be interesting to consider such social presumption could be made universally - it is likely that it cannot.

generateSingleBestFitUseCase4

<C4>

The single best fit use case offers a starnard four geneartion family structure where single links are offered between each object and person. This case can be seen as a best fit appearance linkage structure and although thourgly uninteresting due to it lack of uncertatinty is is importatn to be able to show the models ability to express trandtional linkage sets within its wider functionality.

generateMaleLineUseCase5

<C5>

The males line use case offers a set of possible 6 generation male ancestral lins for person A. This case study would be useful for testing an interative appraoch to querying the structure and the scalability factors that arrive from this.

generateCousinsUseCase6

<C6>

The cousins use case contains three generations allowing for the parents of a person to be considered and then for a traversal across the parents siblings to be made and then the children of these aunts and uncles to be consider in relation to the intial child. The potential shared parentage of C and G allows for them to be considered at siblings and therefore there children as cousins to one another. 

Other permutations:
Use case 10 - Add sibling bridge between {c,g} (onto use case 6)
Use case 18 - Add marriage bridge between {d,f}, {h,e}, {b,c}, {j,g} and {l,i} (onto use case 10)

The bridges added in use case 10 and 18 push towards a possible pedigree consisting of two sperate families as is deconsterated in the possible pedigree shown in <UTC 10>.

The above use cases and explainations lie out for us a wide range of ways in which the Linked population structure is able to express a full range of genalogical posibilities. The model in its strcuturing maintains record depandace by focusing on higher level abstractions of population, for example offsprint, marriage and siblings. The model is able to support any number of possiblities attached to the eith end of a linking object from none in the case of no data being present to one in the case of a tradtional best fit appraoch to any number of links as is demonstrated thorugh the multiple linkages in some of the use cases. The ability for the model to also support a traditional linkage output as well offers interesting potetnails to make use of both traditionally linked datasets and loinked dataset swith uncertainty alongside onathor in a single queryable strucuture. It is also worth noting that the linking objects the structure offers, supports a majority of genaologically significant realtionships. Also the options that the marriage bridge approach offers is important as it is an example of how a wider range of records that can be used to imply genaological relations from the expectations of social constructions. The presence of bridges shows how none didrect genalogical records can be used to further inform uncertatinties in a structure that is focused on direct genalogical strucures.

Scalability

The scalibility of the devised model also needs to be considered. It can be seen from the exmaples of the structure throughout that the number of permutations that begin to appear in localised structures can increase at a relativly high rate. The volume of possibly links and associated evidence could begin to have implication for the memory size of a model, however it is unlikely to cause more that a 2-3x increase in footprint compared to say the Organic Population model. To attain these scaling values it may also be nessersary to look into the ways in which evidnec records are stored to prevent duplication and the storage of data on parts of records that are unused. The need to be this conservative about memory however is unlikely as the previous population models are able to scale to millions of individuals in resonable small data footprints (~1GB per million people) and evern a three fold increase on this is still manageable.

The complexity of the implemented queries themselves over short spans can be be seen to perfrom well. Issues arrising over longer spans will arrise from the in the presence of a high density of possible links as long distance traversals are made. For example bring me the 15th male ancestor of person P. If we consider that each step offers 3 potntial linkages then the number of individuals resturned as the possible ancestor is 3^15 = 14,348,907. For each of these a certainty heuristic will need to be calculated. There are two counters to this issue (although we cannot be sure it is an issue due to not having systhetic data on the scale to be able to test this - the multi generational queries we can run show no slow down although the longest use case only offers 6 generations) :
1) It is unlikely that we will be making genalogical queries that are this far reaching and are more likely to be focused on more imidiate relatives as there will be able to inform us more about the consdiered individual.
2) By adding the functionality to attach threshold values to queries we can discard some ancestoral branches at the point where they cease to become significant or that a large number of better possibilities lie in front of them.

To summarise the scalaibility offered by the model is able to express large enough populations in memeory to be able to work with population scale datasets. From a complexity viewpoint it would appear that the query methods will be sufficent for making useful queries but that optimisation in areas (thresholds, hash lookups, etc.) may prove a nessersary further step to take what is a proof of concept at a small scale to a population scale dataset.

Conclusions

In conclusion I will look to outline the discoveries made and the value of these. Also given this works close reliance and relation to an idealised linkage process I will also discuss the implications for the design of such a linkage process before moving on to talk about the potential wider applications of the research to other domains. Finally I will talk about further work, both within this work and also related to this work.

	Discoveries

The main focus of this work has been to outline a way of strucuting genalogical data to allow for uncertainty to be expossed to the end user while still being able to express a full range of genalogical possibilities. This has required us to formulate an understaning of how to incorporate multiple possibily edges of which only one may represent the truth into a structure that maintains integerity and is easyily inteligible. The structures shown throughout can be seen to display this level of inteligibility and are able to offer multiple linkages between many individuals that exposes the uncertainty of the underlying linkage to the end user. 

The arrival upon the idea of social construct records (i.e. marriage records, social makeup) as indicator for genalogical relationships has been an interesting new viewpoint on viewing different types of records. The use of marriage records as supporting entities in linkage is already widely used but the identification of the idea of using social constructions as indicators of genalogical relationships. This could be extended to a wider set of records that are also represent social movitaveed indicators of genalogical behaviour (i.e. religion, occupation, salary) which could be paired with an understanding of the variation of the effect of these social factors acround the globe. This idea has seen some discussion thorughout and hte implemenation of the combined ceratinty heuristic function allows for intelligennt weightings to be allied to links. The occurance of these calculations at the representation level also requires discussion.

The movement of the divide between linkage and visulisation has been touched on throughout this work. The desire to expose linkage inherent uncertatinty at the visulaisation level has meant that it cannot be expected that the linkage be wholey encasulated before the representation level. This has resulted in the oportunity to allow for the user making queries over the linked data to be used in the linkage process. By breaking open the shell of the linkage process to allow for uncertatinty to be made visible but there is still a need to retain the ability to make traversals accross the structure which require that a more certain pedigree be formed. As this is has to be performed at the point of query this reductio of cpompldxity traditionally seen in the linkage process is having to be performed to an exptent at the respresentation level in the combined certainty heuristic function.

	Value

The implications of the discoveries made have the potetnail to be significant. In short they offer us the ability to better understand out linked datasets enabling users to use data with higher levels of nuance and fidelity. Also in this work we are breaking down any illusions that black box linkage algorithms are a perfectly certain art and exposing to the user the realties of messy data. Hopefully not so that they give up on using this data but that they are able to use it to make better and more informed and proportionaly decisions in light of the realities of the data. The full realisation of the value of these discoveries will take years of further research before we will see if they trult come to fruition. However, in the meantime the simly presence of research which is looking to expose the messyiness of our data to end users may just have the effect of improving the awarness of the issues with the data that we work with and hopefully begin to lead us nearer to a consensus on how large scale data in this day should be produced to minimise these issues.

	Implications for linkage process design

Throughout we have talked about an idealised linkage process and approaches that a new generation of linkage processes will need to take to allow the exposing of uncertatinty at the represenatation level. The comments made here are in no way complete and simply detail the impresions that I have drawn from considering the problem while producing this dissertation.
- The process will need to idenfy its reasoning behind each individual linkage
- The algorithms it uses to indicate certatiny will either need to be rerunably post linkage or this imformation will need to be output with the linkage solutions. This may end up having to balance a trade off between the additional memory footprint of and limiting how wide the linkage algoirthms considerations are. Possibly these considerations will be making decisoins based on a wide selction of the data that is unfelisable to be output to allow for the reruning of the uncertainty calcualtion and so the summaires value alone will have to be output.
- Consideration will have to be given to where the split between the linkage process ends and the representation certatiny heuristic calcuations begin. It may result in a wholey different approach needing to be found that maximises the amount of work done in the linkage stage that is still able expose some degree of uncertatiny to the user.
- A mechansim for dealing with self linkage due to uncertinity when a linkage occurs between two highly similar individuals

	Application to wider domains

The application of the themes of this work to wider domains could have interesting implications accross many domains in linkage beyound genalogy. For example the ability to appciate and be able to represent uncertatinty in data would have real value to the both the health and security domains. Any time we are making decisions based on linked data that effects people we want to be doing so with the fullest understanding and appriciation of our data possible; and in the world of messy data we live in understanding uncertatinty in our data is key to that.

	Further work

At the outset we envisaged that this work would form a resonably contained project that would be able to exist to a resonable extent in a vacuum. However, the amount of further work that this dissertion points to being useful is considerable. The need for research in data linkage algoithms which are able to handle uncertantity in large scale linked data sets is most likely the largest. Other interesting areas still requiring further work invlove how we move the social constructed proxies into our linkage and uncertatinty models effectivly without inducing that many factors for uncertatinty into our models that they become useless. In the way this work expanded out to a complex structure with the expressibility we required before applying restrictions to that model (i.e. the bridges) to enable us retain an understanding of our data and to better anotate our model; the same will need to be done for each facet of uncertatinty we want to involve in our models.

Also within the imediacy of this work, given further time, I would look to implement the query language to the specification discussed, create a model to produce large scale syntetic linked datasets, identify and explore further proxies between social and genalogical events, implement more queries especially focused on many generational queries, query compexity and at a later point to recosider the availiably genalogical ontological schemes and the way in which this work could interact with these.

	Reflection

The process of undertaking a considerable sized piece of research has been a highly enjoyable undertaking. To say it had not been a learning experiance could not be further from the truth. The times in my week I have enjoyed the most over the past two semesters has been the times where I have been able to sit down with a white board with my reseach and to spend time finding out new things. The project has taught me the value of knowing what you are looking for before you start out and that most of the time the number of lines of code and the number JUnits tests on your CI server are not really all that important in research. These things take on the form of tools, things that have enabled me to do research and prevent the code base from disintergrating when I'm more interested in getting code on the page to see if a new idea plays out in reality rather than being bothered about the importance of good code. Also given how the size changing direction can seem daunting. Making decisions to restructure the code base at one point and then to a week later revert back to a the morealess the origonal structuring has shown me that sometimes the only way we can find out if an idea does work is to try it out; but then after that to realise that even though it appears no progress has been made that progress has been made and so not be lose heart at that point. As Thomas Edison allegedly once said, "I have not failed. I've just found 10,000 ways that won't work" - and I've found in research such a menatlity holds true even when it may appear little progress is being made.

Acknolodgements

BM, CO, RC, GK