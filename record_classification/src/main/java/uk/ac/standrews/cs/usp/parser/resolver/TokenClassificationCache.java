package uk.ac.standrews.cs.usp.parser.resolver;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import uk.ac.standrews.cs.usp.parser.classifiers.AbstractClassifier;
import uk.ac.standrews.cs.usp.parser.datastructures.TokenSet;
import uk.ac.standrews.cs.usp.parser.datastructures.code.Code;

/**
 * The Class TokenClassificationCache provides a caching facility to an {@link AbstractClassifier}.
 * When getClassification(TokenSet) is called the cached Pair<Code,Double> is returned from the cache or
 * the Pair<Code, Double> is generated by the AbstractClassifier and added to the cache.
 */
public class TokenClassificationCache {

    /** The classification cache. */
    private Map<TokenSet, Pair<Code, Double>> classifications;

    /** The abstract classifier used to populate the cache. */
    private AbstractClassifier classifier;

    /**
     * Instantiates a new token classification cache with the {@link AbstractClassifier} specified.
     * The classifier specified will be used to generate all Pair<Code,Double>s in the cache.
     *
     * @param classifier the abstract classifier to use when populating the cache
     */
    public TokenClassificationCache(final AbstractClassifier classifier) {

        classifications = new HashMap<>();
        this.classifier = classifier;
    }

    /**
     * Adds the token set to the cache if not allready present.
     *
     * @param tokenSet the token set to add to the cache
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void addTokenSet(final TokenSet tokenSet) throws IOException {

        if (classifications.get(tokenSet) == null) {
            Pair<Code, Double> classification = classifier.classify(tokenSet);
            classifications.put(tokenSet, classification);
        }
    }

    /**
     * Gets the classification (Pair<Code, Double> from the cache or generates and adds it to the cache if not already present.
     *
     * @param tokenSet the token set to classify
     * @return the classification Pair<Code, Double>
     * @throws IOException Signals that an I/O exception has occurred.
     */
    public Pair<Code, Double> getClassification(final TokenSet tokenSet) throws IOException {

        addTokenSet(tokenSet);
        return classifications.get(tokenSet);
    }
}
